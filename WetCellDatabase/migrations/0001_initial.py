# Generated by Django 2.2.6 on 2019-10-22 18:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Coating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('proprietary', models.BooleanField(default=False)),
                ('description', models.CharField(max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
                ('smiles', models.CharField(max_length=1000, null=True)),
                ('proprietary', models.BooleanField(default=False)),
                ('can_be_cathode', models.BooleanField(default=False)),
                ('can_be_anode', models.BooleanField(default=False)),
                ('can_be_separator', models.BooleanField(default=False)),
                ('can_be_electrolyte', models.BooleanField(default=False)),
                ('can_be_salt', models.BooleanField(default=False)),
                ('can_be_additive', models.BooleanField(default=False)),
                ('can_be_solvent', models.BooleanField(default=False)),
                ('can_be_active_material', models.BooleanField(default=False)),
                ('can_be_conductive_additive', models.BooleanField(default=False)),
                ('can_be_binder', models.BooleanField(default=False)),
                ('notes', models.CharField(max_length=1000, null=True)),
                ('particle_size', models.FloatField(null=True)),
                ('single_crystal', models.BooleanField(null=True)),
                ('turbostratic_misalignment', models.FloatField(null=True)),
                ('preparation_temperature', models.FloatField(null=True)),
                ('natural', models.BooleanField(null=True)),
                ('core_shell', models.BooleanField(null=True)),
                ('vendor', models.CharField(max_length=300, null=True)),
                ('coating', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.Coating')),
            ],
        ),
        migrations.CreateModel(
            name='ComponentLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WetCellDatabase.Component')),
            ],
        ),
        migrations.CreateModel(
            name='Composite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proprietary', models.BooleanField(default=False)),
                ('proprietary_name', models.CharField(max_length=100, null=True)),
                ('composite_type', models.CharField(choices=[('el', 'electrolyte'), ('ca', 'cathode'), ('an', 'anode'), ('se', 'separator')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='CompositeLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('composite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WetCellDatabase.Composite')),
            ],
        ),
        migrations.CreateModel(
            name='DryCell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_model', models.CharField(max_length=300)),
                ('family', models.CharField(blank=True, max_length=100, null=True)),
                ('version', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=10000, null=True)),
                ('marking_on_box', models.CharField(blank=True, max_length=300, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('packing_date', models.DateField(blank=True, null=True)),
                ('ship_date', models.DateField(blank=True, null=True)),
                ('shipping_soc', models.FloatField(blank=True, null=True)),
                ('energy_estimate', models.FloatField(blank=True, null=True)),
                ('capacity_estimate', models.FloatField(blank=True, null=True)),
                ('mass_estimate', models.FloatField(blank=True, null=True)),
                ('max_charge_voltage', models.FloatField(blank=True, null=True)),
                ('dcr_estimate', models.FloatField(blank=True, null=True)),
                ('chemistry_freeze_date_requested', models.DateField(blank=True, null=True)),
                ('negative_foil_vendor', models.CharField(max_length=100, null=True)),
                ('gasket_vendor', models.CharField(max_length=100, null=True)),
                ('can_vendor', models.CharField(max_length=100, null=True)),
                ('top_cap_vendor', models.CharField(max_length=100, null=True)),
                ('outer_tape_vendor', models.CharField(max_length=100, null=True)),
                ('anode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='anode', to='WetCellDatabase.CompositeLot')),
                ('cathode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cathode', to='WetCellDatabase.CompositeLot')),
            ],
        ),
        migrations.CreateModel(
            name='DryCellGeometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geometry_category', models.CharField(choices=[('po', 'pouch'), ('cy', 'cylinder'), ('st', 'stack'), ('co', 'coin')], max_length=2)),
                ('cell_width', models.FloatField(null=True)),
                ('cell_length', models.FloatField(null=True)),
                ('cell_thickness', models.FloatField(null=True)),
                ('seal_width_side', models.FloatField(null=True)),
                ('seal_width_top', models.FloatField(null=True)),
                ('metal_bag_sheet_thickness', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DryCellLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dry_cell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WetCellDatabase.DryCell')),
            ],
        ),
        migrations.CreateModel(
            name='ElectrodeGeometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loading', models.FloatField(null=True)),
                ('density', models.FloatField(null=True)),
                ('porosity', models.FloatField(null=True)),
                ('thickness', models.FloatField(null=True)),
                ('length_single_side', models.FloatField(null=True)),
                ('length_double_side', models.FloatField(null=True)),
                ('width', models.FloatField(null=True)),
                ('tab_position_from_core', models.FloatField(null=True)),
                ('foil_thickness', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LotInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_name', models.CharField(max_length=100, null=True)),
                ('known_lot', models.BooleanField(default=True)),
                ('creation_date', models.DateField(null=True)),
                ('creator', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SeparatorGeometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_thickness', models.FloatField(null=True)),
                ('width', models.FloatField(null=True)),
                ('overhang_in_core', models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WetCell',
            fields=[
                ('cell_id', models.IntegerField(primary_key=True, serialize=False)),
                ('dry_cell', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.DryCellLot')),
                ('electrolyte', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.CompositeLot')),
            ],
        ),
        migrations.CreateModel(
            name='RatioComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compound_type', models.CharField(choices=[('sa', 'salt'), ('ad', 'additive'), ('so', 'solvent'), ('am', 'active_material'), ('co', 'conductive_additive'), ('bi', 'binder')], max_length=2)),
                ('ratio', models.FloatField(null=True)),
                ('component_lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WetCellDatabase.ComponentLot')),
                ('composite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WetCellDatabase.Composite')),
            ],
        ),
        migrations.CreateModel(
            name='ElectrodeMaterialStochiometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('atom', models.CharField(choices=[('Li', 'LITHIUM'), ('O', 'OXIGEN'), ('C', 'CARBON'), ('Ni', 'NICKEL'), ('Mn', 'MANGANESE'), ('Co', 'COBALT'), ('Mg', 'MAGNESIUM'), ('Al', 'ALUMINUM'), ('Fe', 'IRON'), ('P', 'PHOSPHORUS'), ('Ti', 'TITANIUM'), ('S', 'SULFUR'), ('Na', 'SODIUM'), ('F', 'FLUORINE'), ('Cl', 'CHLORINE'), ('Cu', 'COPPER'), ('Zn', 'ZINC'), ('Mo', 'MOLYBDENUM'), ('Nb', 'NIOBIUM'), ('Si', 'SILICON'), ('Pt', 'PLATINUM')], max_length=3)),
                ('stochiometry', models.FloatField()),
                ('electrode_material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WetCellDatabase.Component')),
            ],
        ),
        migrations.AddField(
            model_name='drycelllot',
            name='lot_info',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.LotInfo'),
        ),
        migrations.AddField(
            model_name='drycell',
            name='geometry',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.DryCellGeometry'),
        ),
        migrations.AddField(
            model_name='drycell',
            name='separator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='separator', to='WetCellDatabase.CompositeLot'),
        ),
        migrations.AddField(
            model_name='compositelot',
            name='lot_info',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.LotInfo'),
        ),
        migrations.AddField(
            model_name='composite',
            name='electrode_geometry',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.ElectrodeGeometry'),
        ),
        migrations.AddField(
            model_name='composite',
            name='separator_geometry',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.SeparatorGeometry'),
        ),
        migrations.AddField(
            model_name='componentlot',
            name='lot_info',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='WetCellDatabase.LotInfo'),
        ),
    ]
